generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(uuid())
  name               String    @unique
  email              String    @unique
  avatarUrl          String?
  passwordHash       String?
  refreshTokenHash   String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  twoFactorEnabled   Boolean?  @default(false)
  twoFactorSecret    String?
  online             Boolean?  @default(false)
  friends            String[]
  friendRequests     String[]
  friendRequestsSent String[]
  blockedUsers       String[]
  blockedBy          String[]
  gamesHistory       Int[]
  games              Int       @default(0)
  wins               Int       @default(0)
  losses             Int       @default(0)
  played             Int       @default(0)
  winRate            Float?
  playTime           Int       @default(0)
  score              Int       @default(100)
  rank               Int?
  messages           Message[]
  muted              Mute[]
  owner              Channel[] @relation("owner")
  admin              Channel[] @relation("admin")
  member             Channel[] @relation("member")
  invited            Channel[] @relation("invite")
  blockedFrom        Channel[] @relation("blocked")
}

model Channel {
  id        String    @id @default(uuid())
  messages  Message[]
  name      String    @default(uuid())
  picture   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  dm         Boolean @default(false)
  private    Boolean @default(false)
  isPassword Boolean @default(false)
  password   String?

  owner   User? @relation("owner", fields: [ownerId], references: [id])
  ownerId String?
  admins   User[] @relation("admin")
  members  User[] @relation("member")
  inviteds User[] @relation("invite")
  blocked  User[] @relation("blocked")

  muted Mute[]
}

model Mute {
  id        String   @id @default(uuid())
  channel   Channel  @relation(fields: [channelId], references: [id])
  channelId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  begin     DateTime @default(now())
  end       DateTime @default(now())
  finished  Boolean  @default(false)
}

model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  channel   Channel  @relation(fields: [channelId], references: [id])
  channelId String
}

model Game {
  id String @id @default(uuid())
  userA  String
  userB  String
  score1 Int
  score2 Int
  begin    DateTime
  end      DateTime
  duration Int?
}
